#机器学习实战，第二章（一些小知识点）

shape方法可以查看矩阵或数组的维数，shape[0]为数组的行数

argsort()得到矩阵中每个元素的排序序号
1 import numpy as np
2 x=np.array([1,4,3,-1,6,9])
2.现在我们可以看看argsort()函数的具体功能是什么：
y=x.argsort()
输出定义为y=array([3,0,2,1,4,5])。

tile
import numpy
>>> numpy.tile([0,0],5)#在列方向上重复[0,0]5次，默认行1次
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
>>> numpy.tile([0,0],(1,1))#在列方向上重复[0,0]1次，行1次
array([[0, 0]])
>>> numpy.tile([0,0],(2,1))#在列方向上重复[0,0]1次，行2次

sum
c = np.array([[0, 2, 1], [3, 5, 6], [0, 1, 1]])
print c.sum()
print c.sum(axis=0)
print c.sum(axis=1)
结果分别是：19, [3 8 8], [ 3 14  2]

get
dict = {'Name': 'Zara', 'Age': 27}
print "Value : %s" %  dict.get('Age')
print "Value : %s" %  dict.get('Sex', "Never")
以上实例输出结果为：
Value : 27
Value : Never

split
str = "Line1-abcdef \nLine2-abc \nLine4-abcd";
print str.split( );       # 以空格为分隔符，包含 \n
print str.split(' ', 1 ); # 以空格为分隔符，分隔成两个


python中主要存在四种命名方式： 

1、object #公用方法 

2、_object #半保护 

                 #被看作是“protect”，意思是只有类对象和子类对象自己能访问到这些变量， 

                  在模块或类外不可以使用，不能用’from module import *’导入。 

                #__object 是为了避免与子类的方法名称冲突， 对于该标识符描述的方法，父 

                  类的方法不能轻易地被子类的方法覆盖，他们的名字实际上是 

                  _classname__methodname。 

3、_ _ object  #全私有，全保护 

                       #私有成员“private”，意思是只有类对象自己能访问，连子类对象也不能访 

                          问到这个数据，不能用’from module import *’导入。 

4、_ _ object_ _     #内建方法，用户不要这样定义 

映射是一种关联式的容器类型，它存储了对象与对象之间的映射关系，
字典是python里唯一的映射类型，它存储了键值对的关联，是由键到键值的映射关系。 

Python 中字符串的前导 r 代表原始字符串标识符，该字符串中的特殊符号不会被转义

argv[0]为该脚本自身路径，其余为命令行参数

方括号是list，圆括号是tuple，tuple元素不可改变 
###################################################################################
'''
题目描述
输入两个字母串，将两个字母串都包含的字母用'_'替换后，输出两个字母串的剩余部分。
输入描述:
输入两个字符串，字符串最大长度为100。字符串只包含字母，不可能为空串，区分大小写。
输出描述:
按字符串顺序输出处理后的字符串
示例1
输入
abcd
bdef
输出
a_c_ 
__ef
'''
str1=input()
str2=input()
for i in str1:
	for j in str2:
		if i==j:
			str1=str1.replace(i,'_')
			str2=str2.replace(i,'_')
			
print(str1)
print(str2)

'''
def run():

    str1=input('第一组字符串:')

    str2=input('第二组字符串:')

    if len(str1)>100 or len(str2)>100:

        print('请输入长度不超过100的字符串')

        return False

    elif str1=="" or str2=="":

        print('字符串不能为空')

        return False

    elif not str1.isalpha() or not str2.isalpha():

        print('请输入只包含字母的字符串')

        return False

    comment_list = set(str1).intersection(str2)

    for row in comment_list:

        str1 = str1.replace(row,'_')

        str2 = str2.replace(row,'_')

    print('相同的字母:{0}'.format(comment_list))

    print(str1)

    print(str2)

    return True

run()
'''
#######################################################################################################
'''
1.计算字符串最后一个单词的长度，单词以空格隔开。
输入：hello world   输出：5
'''
# a=input().split()
# print(len(a[-1]))


'''
2. 写出一个程序，接受一个由字母和数字组成的字符串，和一个字符，然后输出输入字符串中含有该字符的个数。不区分大小写。
Python count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。
count()方法语法：
str.count(sub, start= 0,end=len(string))

'''
# a=input().lower()
# b=input().lower()
# print(a.count(b))

'''
3.明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤1000），
对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，
按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作(同一个测试用例里可能会有多组数据，希望大家能正确处理)。
--------------------- 
作者：lulu_1994 
来源：CSDN 
原文：https://blog.csdn.net/qq_42685969/article/details/82085067 
版权声明：本文为博主原创文章，转载请附上博文链接！

python中的random.randint(a,b)用于生成一个指定范围内的整数。其中参数a是下限，参数b是上限，生成的随机数n: a <= n <= b
'''
# while True:    
	# try:        
		# n=int(input()) #读入第一行：随机整数的个数        
		# res=set()        
		# for i in range(n): 
			# suiji=random.randint(1,1000)
			# res.add(suiji)# 读入第n行：n个随机整数组成的数组         
		# for i in sorted(res):            
			# print(i)   
	# except:        
		# break
		
'''
4. 连续输入字符串，请按长度为8拆分每个字符串后输出到新的字符串数组；
   长度不是8整数倍的字符串请在后面补数字0，空字符串不处理。
'''
# string=list(input())
# res=8-(len(string)%8)
# for i in range(res):
	# string.append('0')
# print(string)
# n=int((len(string))/8)
# for i in range(n):
	# a=string[i*8:(i+1)*8]
	# a=''.join(a)
	# print(a)

'''
写出一个程序，接受一个十六进制的数值字符串，输出该数值的十进制字符串。（多组同时输入 ）
10进制转16进制: hex(16)  ==>  0x10
16进制转10进制: int('0x10', 16)  ==>  16
'''
# a=input()
# res=0
# for i in range(len(a)):
	# if a[i]=='A':
		# res+=10*16**(len(a)-i-1)
	# elif a[i]=='B':
		# res+=11*16**(len(a)-i-1)
	# elif a[i]=='C':
		# res+=12*16**(len(a)-i-1)
	# elif a[i]=='D':
		# res+=13*16**(len(a)-i-1)
	# elif a[i]=='E':
		# res+=14*16**(len(a)-i-1)
	# elif a[i]=='F':
		# res+=15*16**(len(a)-i-1)
	# else:
		# res+=int(a[i])*16**(len(a)-i-1)
# print(res)

'''
功能:输入一个正整数，按照从小到大的顺序输出它的所有质数的因子（如180的质数因子为2 2 3 3 5 ）,最后一个数后面也要有空格
'''
	
# n=int(input())
# zhishu=[]
# if n<=0:
	# n=int(input())
# else:	
	# for i in range(2,n+1):
		# for j in range(2,n+1):
			# if n%j==0:
				# zhishu.append(str(j))
				# n=int(n/j)
				# break
		# if n==1:
			# break
	# print(' '.join(zhishu))
	
'''
输入一个int型整数，按照从右向左的阅读顺序，返回一个不含重复数字的新的整数。
'''
# result=''
# n=input()
# for i in n[::-1]:
	# if i not in result:
		# result+=i
# print(result)

'''
将一个英文语句以单词为单位逆序排放。例如“I am a boy”，
逆序排放后为“boy a am I”所有单词之间用一个空格隔开，语句中除了英文字母外，不再包含其他字符
'''
# juzi=input().split()
# xinjuzi=[]
# for i in juzi[::-1]:
	# xinjuzi.append(i)
# print(' '.join(xinjuzi))

'''
求最小公倍数

正整数A和正整数B 的最小公倍数是指 能被A和B整除的最小的正整数值，设计一个算法，求输入A和B的最小公倍数。

'''
# a=int(input())
# b=int(input())
# if a<b:
	# for i in range(1,a+1):
		# if (i*b)%a==0:
			# print(i*b)
			# break
# else:	
	# for i in range(1,b+1):
		# if (i*a)%b==0:
			# print(i*a)
			# break
			
######################################################################
'''
13号又是星期五是一个不寻常的日子吗?
13号在星期五比在其他日少吗?为了回答这个问题,写一个程序来计算在n年里13
日落在星期一,星期二……星期日的次数.这个测试从1900年1月1日到
1900+n-1年12月31日.n是一个非负数且不大于400.
这里有一些你要知道的:

1900年1月1日是星期一.
4,6,11和9月有30天.其他月份除了2月有31天.闰年2月有29天,平年2月有28天.
年份可以被4整除的为闰年(1992=4*498 所以 1992年是闰年,但是1990年不是闰年)
以上规则不适合于世纪年.可以被400整除的世纪年为闰年,否则为平年.所以,1700,1800,1900和2100年是平年,而2000年是闰年.
请不要预先算好数据! 

输入
一个整数n。
输出
七个在一行且相分开的整数,它们代表13日是星期六,星期日,星期一…..星期五的次数。
--------------------- 
作者：CS青雀 
来源：CSDN 
原文：https://blog.csdn.net/ztf312/article/details/48495231 
版权声明：本文为博主原创文章，转载请附上博文链接！
'''
def get(y,m):
	if (y%4==0 and y%100!=0):
		i=1
	else:
		i=0
	if (m==1 or m==3 or m==5 or m==7 or m==8 or m==10 or m==12):
		return 31
	elif m==2:
		if (i==1):
			return 29
		else:
			return 28
	return 30
	
n=int(input())
while n<0 or n>400:
	n=input()
a=[0 for i in range(7)]
week=13
for i in range(1900,1900+n):
	for j in range(1,13):
		a[week%7]+=1
		week+=get(i,j)
print(str(a[6])+' '+str(a[0]))
for i in range(1,6):
	print(str(a[i])+' ')
	
####################################################################
import math
'''
有两个序列a,b，大小都为n,序列元素的值任意整形数，无序；要求：通过交换a,b中的元素，使[序列a元素的和]与[序列b元素的和]之间的差最小。
1. 将两序列合并为一个序列，并排序，为序列Source
2. 拿出最大元素Big，次大的元素Small
3. 在余下的序列S[:-2]继续拿出最大和最小元素，最后得到各有一个元素的得到序列small_list,
 large_list
4. 将Small加到max序列，将Big加大min序列，以此递归，重新计算新序列和，和大的为max，小的为min。
--------------------- 
作者：michellechouu 
来源：CSDN 
原文：https://blog.csdn.net/michellechouu/article/details/26940557 
版权声明：本文为博主原创文章，转载请附上博文链接！
'''
a=(input().split())
b=(input().split())
c=a+b
list3=[]
for i in range(len(a+b)):
	list3.append(int((c).pop(0)))
lists=sorted(list3)
print(lists)
list1=[]
list2=[]

j=0
# if len(lists)%2==0:
list1.append(lists[0])
list2.append(lists[1])
for i in range(2,len(lists)-1,2):	
	if list1[j]>list2[j]:
		list1.append(lists[i])
		list2.append(lists[i+1])
		j+=1
	else: 
		list1.append(lists[i+1])
		list2.append(lists[i])
		j+=1
# else:	
	# for i in range((int(len(lists)/2)+1)):
		# list1.append(lists[i])
	# for i in range((int(len(lists)/2)+1),len(lists)):
		# list2.append(lists[i])
	
e=sum(list1)-sum(list2)	
print(list1)
print(list2)
print(e)
##############################################################################
'''
[编程题] 进制转换
 时间限制：1秒
 空间限制：32768K
 写出一个程序，接受一个十六进制的数值字符串，输出该数值的十进制字符串。（多组同时输入 ）
 输入描述:
 输入一个十六进制的数值字符串。
 
 输出描述:
 输出该数值的十进制字符串。

 输入例子1:
 0xA
输出例子1:
 10
 '''
while True:
	try:
		ten_num=0
		num=input()[2:]
		print(num)
		for i in range(len(num)):
			if num[i]=='A':
				ten_num+=10*16**(len(num)-1-i)
			elif num[i]=='B':
				ten_num+=11*16**(len(num)-1-i)
			elif num[i]=='C':
				ten_num+=12*16**(len(num)-1-i)
			elif num[i]=='D':
				ten_num+=13*16**(len(num)-1-i)
			elif num[i]=='E':
				ten_num+=14*16**(len(num)-1-i)
			elif num[i]=='F':
				ten_num+=15*16**(len(num)-1-i)
			else:
				ten_num+=int(num[i])*16**(len(num)-1-i)
		print(ten_num)
	except:
		break
		
#############################################################################
'''
[编程题] 汽水瓶
时间限制：1秒
空间限制：32768K
有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”
答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，
这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。
如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？ 
输入描述:
输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n（1<=n<=100），
表示小张手上的空汽水瓶数。n=0表示输入结束，你的程序不应当处理这一行。
输出描述:
对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出0。
--------------------- 
作者：ChrisMinions 
来源：CSDN 
原文：https://blog.csdn.net/qq_34617032/article/details/78530133 
版权声明：本文为博主原创文章，转载请附上博文链接！
'''
while True:
	n=int(input())
	if n!=0:
		qishui=0	
		while n>2:	
			qishui+=int(n/3)
			yu=n%3
			n=yu+int(n/3)
		qishui+=int(n/3)+yu
		print(qishui)
	else:
		break
		
'''
#####################################################################################
'''
华为机测题:
明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性
他先用计算机生成了N个1～1000之间的随机整数(N<=1000),N是用户输入的，对于
其中重复的数字，只保留一个，把其余相同的数字去掉，不同的数对应着不同的学生的学号，然后再把这些
数从小到大排序，按照排好的顺序去找同学做调查，请你协助明明完成“去重”与排序工作
--------------------- 
作者：淋巴不想动 
来源：CSDN 
原文：https://blog.csdn.net/weixin_43067754/article/details/84589652 
版权声明：本文为博主原创文章，转载请附上博文链接！
'''
import random
# 优先选择集和
s = set([])
#用户选择输入N个整数，即循环N次
for i in range(int(input('N:'))):
    s.add(random.randint(1,1000))
    #这N个数的范围是1-1000
print(sorted(s))
#######################################################################################
'''
[编程题] 最高分是多少
时间限制：1秒
空间限制：65536K
老师想知道从某某同学当中，分数最高的是多少，现在请你编程模拟老师的询问。当然，老师有时候需要更新某位同学的成绩. 
输入描述:
输入包括多组测试数据。
每组输入第一行是两个正整数N和M（0 < N <= 30000,0 < M < 5000）,分别代表学生的数目和操作的数目。
学生ID编号从1编到N。
第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩
接下来又M行，每一行有一个字符C（只取‘Q’或‘U’），和两个正整数A,B,当C为'Q'的时候, 表示这是一条询问操作，
他询问ID从A到B（包括A,B）的学生当中，成绩最高的是多少
当C为‘U’的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。
输出描述:
 对于每一次询问操作，在一行里面输出最高成绩.


 输入例子1:
 5 7
 1 2 3 4 5
 Q 1 5
 U 3 6
 Q 3 4
 Q 4 5
 U 4 5
 U 2 9
 Q 1 5
输出例子1:
 5
 6
 5
 9
 
--------------------- 
作者：ChrisMinions 
来源：CSDN 
原文：https://blog.csdn.net/qq_34617032/article/details/78530046 
版权声明：本文为博主原创文章，转载请附上博文链接！
'''
while True:
	try:
		N, M=[int(each) for each in input().split()]
		sorces=[int(each) for each in input().split()]
		opers=[]
		for i in range(M):
			opers.append(input().split())
		for i in range(M):
			caozuo=opers[i]
			if caozuo[0]=='Q':
				max_chengji=max(sorces[int(caozuo[1]):int(caozuo[2])])
				print(max_chengji)
			else:
				sorces[int(caozuo[1])]=int(caozuo[2])
			# print(max_chengji)
	except:
		break
#################################################################################
'''
题目描述：找出输入字符串中的重复字符，再根据ASCII码把重复的字符从小到大排序。

例如：输入ABCABCdd，输出ABCd。

解答：计数排序，没有什么难度（计数排序是华为机试题出现次数最多的排序方法，没有之一）：
'''
# a=input()
# b={}
# for i in a:
	# if i not in b.keys():
		# b[i]=1
	# else:
		# b[i]+=1
# c=[]
# for i in b.keys():
	# if b[i]>1:	
		# c.append(i)
# print(c)

'''
重复字符最长串

题目描述：给定一串字符，里面有些字符有连续出现的特点，请寻找这些连续出现字符中最长的串，如果最长的串有多个，
请输出字符ASCII码最小的那一串。

例如：输入aaabbbbbcccccccczzzzzzzz，输出cccccccc。
'''
# def lists():
	# string=[]
	# return string
	
# strs=input()
# string=[]
# a=lists()
# a.append(strs[0])
# for i in range(len(strs)-1):
	# if strs[i]==strs[i+1]:
		# a.append(strs[i+1])
	# else:
		# string.append(a)
		# a=lists()
		# a.append(strs[i+1])
# string.append(a)
# maxs=string[0]
# for i in string[1:]:
	# if len(maxs)<len(i):
		# maxs=i
	# if len(maxs)==len(i):
		# if ord(maxs[0])>ord(i[0]):
			# maxs=i
# print(''.join(maxs))
'''
#将字符转化为数字ord,将数字转化为字符chr()
append()函数和extend()函数之间的差距
music_media = ['compact disc', '8-track tape', 'long playing record']

new_media = ['DVD Audio disc', 'Super Audio CD']

music_media.append(new_media)

print music_media

>>>['compact disc', '8-track tape', 'long playing record', ['DVD Audio disc', 'Super Audio CD']] 


使用append的时候，是将new_media看作一个对象，整体打包添加到music_media对象中。


music_media = ['compact disc', '8-track tape', 'long playing record']

new_media = ['DVD Audio disc', 'Super Audio CD']

music_media.extend(new_media)

print music_media

>>>['compact disc', '8-track tape', 'long playing record', 'DVD Audio disc', 'Super Audio CD'] 

如何把列表转化为字符串
>>> ls1 = ['a', 1, 'b', 2]
>>> ls2 = [str(i) for i in ls1]
>>> ls2
['a', '1', 'b', '2']
>>> ls3 = ''.join(ls2)
>>> ls3
'a1b2'


题目描述：已知某小镇的房子沿直线分布，给定一个有序整数数组arr，里面的每个镇代表小镇每栋房子的一维坐标点。
现在需要建N个广告牌，广告牌只能建立在这些坐标点上，使得每个坐标点离广告牌的总距离最短，求这个最短的总距离。

输入描述：输入最后一个为N值，其余的为arr值，需要考生自行处理。

例如：输入1 2 3 4 5 1000 2，输出6。
--------------------- 
作者：Yngz_Miao 
来源：CSDN 
原文：https://blog.csdn.net/qq_38410730/article/details/81633634 
版权声明：本文为博主原创文章，转载请附上博文链接！
'''
#程序有错
def dis(shurus,N):
	distances=[]
	distance=0
	if N==1:
		
		for i in shurus:
			for j in shurus:
				if int(j)>int(i):
					distance+=int(j)-int(i)
				else:
					distance+=int(i)-int(j)
			distances.append(distance)
		print(min(distances))
	else:
		for i in range(len(shurus)):
			dis(shurus[:i],N-1)
			dis(shurus[i:],N-1)
			
a=input().split()
a.pop(-1)
N=int(a[-1])
dis(a,N)












